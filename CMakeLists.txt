if(NOT DEFINED CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Installation Directory")
endif()
message(STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")

if(NOT DEFINED OTTER_VERSION)
    string(TIMESTAMP OTTER_VERSION "%Y%m%d")
endif()

set(OTTER_VERSION_MAJOR 1)
set(OTTER_VERSION_MINOR 0)
set(OTTER_VERSION_PATCH ${OTTER_VERSION})
set(OTTER_VERSION_STRING ${OTTER_VERSION_MAJOR}.${OTTER_VERSION_MINOR}.${OTTER_VERSION_PATCH})
if(APPLE OR IOS)
    # macos / ios only accepts a.b.c.d.e where a=24bit b/c/d/e=10bit
    # 20201228 to 20.12.28
    string(SUBSTRING ${OTTER_VERSION} 2 2 OTTER_VERSION_YEAR)
    string(SUBSTRING ${OTTER_VERSION} 4 2 OTTER_VERSION_MONTH)
    string(SUBSTRING ${OTTER_VERSION} 6 2 OTTER_VERSION_DAY)
    set(OTTER_VERSION_STRING ${OTTER_VERSION_MAJOR}.${OTTER_VERSION_MINOR}.${OTTER_VERSION_YEAR}.${OTTER_VERSION_MONTH}.${OTTER_VERSION_DAY})
endif()
message(STATUS "OTTER_VERSION_STRING = ${OTTER_VERSION_STRING}")

cmake_minimum_required(VERSION 2.8.12)

set(CMAKE_CXX_STANDARD 17)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE release CACHE STRING "Choose the type of build" FORCE)
endif()

if(NOT CMAKE_VERSION VERSION_LESS "3.15")
    # enable CMAKE_MSVC_RUNTIME_LIBRARY
    cmake_policy(SET CMP0091 NEW)
endif()

if(POLICY CMP0025)
    # reference from https://cmake.org/cmake/help/latest/policy/CMP0025.html
    cmake_policy(SET CMP0025 NEW)
endif()

project(otter)

if(MSVC AND NOT CMAKE_VERSION VERSION_LESS "3.15")
    option(OTTER_BUILD_WITH_STATIC_CRT "Enables use of statically linked CRT for statically linked OTTER" OFF)
    if(OTTER_BUILD_WITH_STATIC_CRT)
        # cmake before version 3.15 not work
        set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    endif()
endif()

option(OTTER_SHARED_LIB "shared library support" OFF)
option(OTTER_ENABLE_LTO "enable link-time optimization" OFF)
option(OTTER_OPENMP "openmp support" ON)
option(OTTER_INSTALL_SDK "install OTTER library and headers" ON)
option(OTTER_CMAKE_VERBOSE "print verbose cmake messages" OFF)
option(OTTER_SYSTEM_GLSLANG "use system glslang library" OFF)
option(OTTER_RUNTIME_CPU "runtime dispatch cpu routines" OFF)
option(OTTER_DISABLE_PIC "disable position-independent code" OFF)
option(OTTER_FORCE_INLINE "force inline some function" ON)
option(OTTER_BUILD_BENCHMARK "build benchmark" ON)

if(ANDROID OR IOS OR CMAKE_CROSSCOMPILING)
    option(OTTER_DISABLE_RTTI "disable rtti" ON)
    option(OTTER_BUILD_TOOLS "build tools" OFF)
    option(OTTER_BUILD_EXAMPLES "build examples" OFF)
else()
    option(OTTER_DISABLE_RTTI "disable rtti" OFF)
    option(OTTER_BUILD_TOOLS "build tools" ON)
    option(OTTER_BUILD_EXAMPLES "build examples" ON)
endif()

#if(ANDROID OR IOS OR LINUX)
#    option(OTTER_DISABLE_EXCEPTION "disable exception" ON)
#else()
    option(OTTER_DISABLE_EXCEPTION "disable exception" OFF)
#endif()

if(OTTER_SHARED_LIB)
    if(OTTER_BUILD_TESTS)
        message(WARNING "OTTER_SHARED_LIB must be OFF to build tests! OTTER_BUILD_TESTS will be turned off.")
        set(OTTER_BUILD_TESTS OFF)
    endif()

    if(OTTER_ENABLE_LTO)
        # enable global link time optimization
        cmake_policy(SET CMP0069 NEW)
        set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
        include(CheckIPOSupported)
        check_ipo_supported(RESULT ipo_supported OUTPUT ipo_supported_output)
        if(ipo_supported)
            set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        else()
            message(WARNING "IPO is not supported: ${ipo_supported_output}")
            set(OTTER_ENABLE_LTO OFF)
        endif()
    endif()
endif()

if((IOS AND CMAKE_OSX_ARCHITECTURES MATCHES "arm")
    OR (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
    OR (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|aarch64)")
    OR ((CMAKE_CXX_COMPILER_ID MATCHES "MSVC" OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_SIMULATE_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "MSVC")) AND (${CMAKE_GENERATOR_PLATFORM} MATCHES "^(arm|arm64)")))
    set(OTTER_TARGET_ARCH arm)

    if(NOT (CMAKE_CXX_COMPILER_ID MATCHES "MSVC" OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_SIMULATE_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "MSVC")))
        include(CheckCXXCompilerFlag)
        check_cxx_compiler_flag("-march=armv8.2-a+fp16" OTTER_COMPILER_SUPPORT_ARM82_FP16)
        check_cxx_compiler_flag("-march=armv8.2-a+fp16+dotprod" OTTER_COMPILER_SUPPORT_ARM82_FP16_DOTPROD)
    endif()

    if(OTTER_COMPILER_SUPPORT_ARM82_FP16)
        option(OTTER_ARM82 "optimize aarch64 platform with armv8.2" ON)
        if(OTTER_COMPILER_SUPPORT_ARM82_FP16_DOTPROD)
            if(OTTER_ARM82)
                option(OTTER_ARM82DOT "optimize aarch64 platform with armv8.2 dotprod" ON)
            endif()
        else()
            message(WARNING "The compiler does not support armv8.2 dotprod. OTTER_ARM82DOT will be OFF.")
        endif()
    else()
        message(WARNING "The compiler does not support armv8.2. OTTER_ARM82 will be OFF.")
    endif()
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips)")
    set(OTTER_TARGET_ARCH mips)

    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-mmsa" OTTER_COMPILER_SUPPORT_MIPS_MSA)

    set(CMAKE_REQUIRED_FLAGS "-mloongson-mmi -I${CMAKE_CURRENT_SOURCE_DIR}/src/layer/mips")
    check_cxx_source_compiles("#include \"loongson_mmi.h\"\nint main() { int16x4_t _a, _b; int32x2_t _s = __mmi_pmaddhw(_a, _b); return 0; }" OTTER_COMPILER_SUPPORT_LOONGSON_MMI)

    if(OTTER_COMPILER_SUPPORT_MIPS_MSA)
        option(OTTER_MSA "optimize mips platform with msa extension" ON)
    else()
        message(WARNING "The compiler does not support msa extension. OTTER_MSA will be OFF.")
    endif()
    if(OTTER_COMPILER_SUPPORT_LOONGSON_MMI)
        option(OTTER_MMI "optimize mips platform with loongson mmi extension" ON)
    else()
        message(WARNING "The compiler does not support loongson mmi extension. OTTER_MMI will be OFF.")
    endif()
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(riscv)")
    set(OTTER_TARGET_ARCH riscv)

    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-march=rv64gcv" OTTER_COMPILER_SUPPORT_RVV)
    check_cxx_compiler_flag("-march=rv64gcv_zfh" OTTER_COMPILER_SUPPORT_RVV_FP16)

    if(OTTER_COMPILER_SUPPORT_RVV)
        option(OTTER_RVV "optimize risc-v platform with v extension" ON)
        if(NOT OTTER_COMPILER_SUPPORT_RVV_FP16)
            message(WARNING "The compiler does not support risc-v zfh extension. Upgrading your toolchain is strongly recommended.")
        endif()
    else()
        message(WARNING "The compiler does not support risc-v v extension. OTTER_RVV will be OFF.")
    endif()
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)")
    set(OTTER_TARGET_ARCH powerpc)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(loongarch)")
    set(OTTER_TARGET_ARCH loongarch)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(xtensa)")
    set(OTTER_TARGET_ARCH xtensa)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(s390x)")
    set(OTTER_TARGET_ARCH s390x)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(sw_64)")
    set(OTTER_TARGET_ARCH sw_64)
    #sw_64 is alpha-like platform
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mieee")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mieee")
else()
    set(OTTER_TARGET_ARCH x86)

    option(OTTER_SSE2 "optimize x86 platform with sse2 extension" ON)

    include(CheckCXXCompilerFlag)
    if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC" OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_SIMULATE_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "MSVC"))
        check_cxx_compiler_flag("/arch:AVX" OTTER_COMPILER_SUPPORT_X86_AVX)
        check_cxx_compiler_flag("/arch:AVX" OTTER_COMPILER_SUPPORT_X86_FMA)
        check_cxx_compiler_flag("/arch:AVX" OTTER_COMPILER_SUPPORT_X86_XOP)
        check_cxx_compiler_flag("/arch:AVX" OTTER_COMPILER_SUPPORT_X86_F16C)
        check_cxx_compiler_flag("/arch:AVX2" OTTER_COMPILER_SUPPORT_X86_AVX2)
        check_cxx_compiler_flag("/arch:AVX2" OTTER_COMPILER_SUPPORT_X86_AVX_VNNI)
        check_cxx_compiler_flag("/arch:AVX512" OTTER_COMPILER_SUPPORT_X86_AVX512)
        check_cxx_compiler_flag("/arch:AVX512" OTTER_COMPILER_SUPPORT_X86_AVX512_VNNI)
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.16)
            # vs2017+ supports avx512 and vnni
            set(OTTER_COMPILER_SUPPORT_X86_AVX_VNNI OFF)
            set(OTTER_COMPILER_SUPPORT_X86_AVX512 OFF)
            set(OTTER_COMPILER_SUPPORT_X86_AVX512_VNNI OFF)
        endif()
    else()
        check_cxx_compiler_flag("-mavx" OTTER_COMPILER_SUPPORT_X86_AVX)
        check_cxx_compiler_flag("-mfma" OTTER_COMPILER_SUPPORT_X86_FMA)
        check_cxx_compiler_flag("-mxop" OTTER_COMPILER_SUPPORT_X86_XOP)
        check_cxx_compiler_flag("-mf16c" OTTER_COMPILER_SUPPORT_X86_F16C)
        check_cxx_compiler_flag("-mfma -mf16c -mavx2" OTTER_COMPILER_SUPPORT_X86_AVX2)
        check_cxx_compiler_flag("-mfma -mf16c -mavx512f -mavx512bw -mavx512vl" OTTER_COMPILER_SUPPORT_X86_AVX512)

        set(CMAKE_REQUIRED_FLAGS "-mfma -mf16c -mavx2 -mavxvnni")
        check_cxx_source_compiles("#include <immintrin.h>\nint main() { __m256i _s, _a, _b; _s = _mm256_dpwssd_epi32(_s, _a, _b); return 0; }" OTTER_COMPILER_SUPPORT_X86_AVX_VNNI)

        set(CMAKE_REQUIRED_FLAGS "-mfma -mf16c -mavx512f -mavx512bw -mavx512vl -mavx512vnni")
        check_cxx_source_compiles("#include <immintrin.h>\nint main() { __m256i _s, _a, _b; _s = _mm256_dpwssd_epi32(_s, _a, _b); return 0; }" OTTER_COMPILER_SUPPORT_X86_AVX512_VNNI)

        unset(CMAKE_REQUIRED_FLAGS)
    endif()

    if(NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten" AND OTTER_COMPILER_SUPPORT_X86_AVX)
        option(OTTER_AVX "optimize x86 platform with avx extension" ON)
        if(OTTER_COMPILER_SUPPORT_X86_FMA)
            if(OTTER_AVX)
                option(OTTER_FMA "optimize x86 platform with fma extension" ON)
            endif()
        else()
            message(WARNING "The compiler does not support fma extension. OTTER_FMA will be OFF.")
        endif()
        if(OTTER_COMPILER_SUPPORT_X86_XOP)
            if(OTTER_AVX)
                option(OTTER_XOP "optimize x86 platform with xop extension" ON)
            endif()
        else()
            message(WARNING "The compiler does not support xop extension. OTTER_XOP will be OFF.")
        endif()
        if(OTTER_COMPILER_SUPPORT_X86_F16C)
            if(OTTER_AVX)
                option(OTTER_F16C "optimize x86 platform with f16c extension" ON)
            endif()
        else()
            message(WARNING "The compiler does not support f16c extension. OTTER_F16C will be OFF.")
        endif()
        if(OTTER_COMPILER_SUPPORT_X86_AVX2)
            if(OTTER_AVX)
                option(OTTER_AVX2 "optimize x86 platform with avx2 extension" ON)
            endif()
            if(OTTER_COMPILER_SUPPORT_X86_AVX_VNNI)
                if(OTTER_AVX2)
                    option(OTTER_AVXVNNI "optimize x86 platform with avx vnni extension" ON)
                endif()
            else()
                message(WARNING "The compiler does not support avx vnni extension. OTTER_AVXVNNI will be OFF.")
            endif()
            if(OTTER_COMPILER_SUPPORT_X86_AVX512)
                if(OTTER_AVX2)
                    option(OTTER_AVX512 "optimize x86 platform with avx512 extension" ON)
                endif()
                if(OTTER_COMPILER_SUPPORT_X86_AVX512_VNNI)
                    if(OTTER_AVX512)
                        option(OTTER_AVX512VNNI "optimize x86 platform with avx512 vnni extension" ON)
                    endif()
                else()
                    message(WARNING "The compiler does not support avx512 vnni extension. OTTER_AVX512VNNI will be OFF.")
                endif()
            else()
                message(WARNING "The compiler does not support avx512 extension. OTTER_AVX512 will be OFF.")
            endif()
        else()
            message(WARNING "The compiler does not support avx2 extension. OTTER_AVX2 will be OFF.")
        endif()
    else()
        message(WARNING "The compiler does not support avx extension. OTTER_AVX will be OFF.")
    endif()
endif()

message(STATUS "Target arch: ${OTTER_TARGET_ARCH}")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "cmake")

if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1")
    set(CMAKE_EXECUTBLE_LINKER_FLAGS "${CMAKE_EXECUTBLE_LINKER_FLAGS} -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1")

    if(OTTER_OPENMP)
        # TODO better flags for emscripten
        # node --experimental-wasm-threads xxx.js
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15")
        set(CMAKE_EXECUTBLE_LINKER_FLAGS "${CMAKE_EXECUTBLE_LINKER_FLAGS} -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15")
    endif()
endif()

message("Example: ${OTTER_BUILD_EXAMPLES}")

add_subdirectory(Tensor)
if(OTTER_BUILD_BENCHMARK)
    add_subdirectory(benchmark)
endif()
if(OTTER_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()
